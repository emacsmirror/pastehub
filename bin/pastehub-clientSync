#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'net/http'
require 'uri'
require 'open-uri'
require 'fileutils'
require 'pastehub'
PasteHub::Config.instance.loadClient
SERVER_API_HOST      = PasteHub::Config.instance.targetApiHost
SERVER_NOTIFIER_HOST = PasteHub::Config.instance.targetNotifierHost
LOCALDB_PATH         = PasteHub::Config.instance.localDbPath
LIST_ITEMS           = PasteHub::Config.instance.listItems

def getValue( auth, key )
  uri = URI.parse("http://#{SERVER_API_HOST}/getValue")
  ret = ""
  Net::HTTP.start(uri.host, uri.port) do |http|
    http.post(uri.request_uri, key, auth.getAuthHash().merge( {"content-type" => "plain/text"} )) { |str|
      ret = str
    }
  end
  ret
end

def putValue( auth, key, value )
  uri = URI.parse("http://#{SERVER_API_HOST}/putValue")
  ret = ""
  Net::HTTP.start(uri.host, uri.port) do |http|
    http.post(uri.request_uri, value,
              auth.getAuthHash().merge(
                                       { "content-type" => "plain/text",
                                         "x-pastehub-key" => key    }
                                       )) { |str|
      ret = str
    }
  end
  ret
end

def pushToMacOSX( data )
  begin
    IO.popen("/usr/bin/pbcopy", "r+") {|io|
      io.write data
      io.close
    }
    STDERR.puts "Info: push to MacOS X clipboard."
  rescue IOError => e
    STDERR.puts( "Error: program /usr/bin/pbcopy not found." )
    return false
  end
end

def sync_db( auth )
  puts "synchronizing..."
  uri = URI.parse("http://#{SERVER_API_HOST}/getList")
  masterList = []
  Net::HTTP.start(uri.host, uri.port) do |http|
    http.get(uri.request_uri, auth.getAuthHash().merge( {"content-type" => "plain/text"} )) { |str|
      masterList = str.split( /\n/ )
      STDERR.puts "Info: masterList lines = #{masterList.size}  #{str.size}Bytes"
      masterList = masterList.map { |x|
        okSize = "1340542369=2012-06-24.12:52:49=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa".size
        if okSize != x.size
          STDERR.puts "Info: masterList(NG): " + x
          false
        else
          x
        end
      }
    }
  end
  # open local db
  localdb = PasteHub::LocalDB.new( LOCALDB_PATH )
  localdb.open( auth.username )

  # calc difference between master and local.
  localList = localdb.getList().take( LIST_ITEMS )
  util = PasteHub::Util.new
  downList = util.diffList( masterList, localList )
  localList = localList.take( LIST_ITEMS - downList.size )
  upList   = util.diffList( localList, masterList )

  # push first element to MacOS X clipboard.
  key = downList.first
  value = getValue( auth, key )
  pushToMacOSX( value.dup )

  # donwload
  downList.each {|key|
    value = getValue( auth, key )
    localdb.insertValue( key.dup, value.dup )
  }
  # upload
  upList.each {|key|
    value = localdb.getValue( key )
    putValue( auth,      key.dup, value.dup )
  }

  puts "Info: download #{downList.size} records."
  puts "Info:   upload #{upList.size} records."

  localdb.close()
end

def serverHasNew?( username, serverValue )
  # open local db
  localdb = PasteHub::LocalDB.new( LOCALDB_PATH )
  localdb.open( username )
  localValue = localdb.getValue( PasteHub::SERVER_DATE_KEY )
  ret = (localValue != serverValue)
  if ret
    localdb.insertValue( PasteHub::SERVER_DATE_KEY, serverValue )
  end
  localdb.close()
  return ret
end

def localHasNew?( username )
  localdb = PasteHub::LocalDB.new( LOCALDB_PATH )
  localdb.open( username )
  localValue  = localdb.getValue( PasteHub::LOCAL_DATE_KEY )
  serverValue = localdb.getValue( PasteHub::SERVER_DATE_KEY )
  ret = if localValue and serverValue
          (localValue > serverValue)
        else
          false
        end
  if ret
    localdb.insertValue( PasteHub::LOCAL_DATE_KEY, serverValue )
  end
  localdb.close()
  return ret
end

def setOnlineState( username, online )
  # open local db
  localdb = PasteHub::LocalDB.new( LOCALDB_PATH )
  localdb.open( username )
  localdb.insertValue( PasteHub::ONLINE_STATE_KEY, online ? "1" : "0" )
  localdb.close()
end

def wait_notify( auth )
  begin
    uri = URI.parse("http://#{SERVER_NOTIFIER_HOST}/")
    Net::HTTP.start(uri.host, uri.port) do |http|
      request = Net::HTTP::Get.new(uri.request_uri, auth.getAuthHash())
      http.request(request) do |response|
        raise 'Response is not chuncked' unless response.chunked?
        response.read_body do |chunk|
          serverValue = chunk.chomp
          if serverHasNew?( auth.username, serverValue )
            puts "Info: server has new data: #{serverValue}"
            return chunk.chomp
          else
            puts "Info: server is stable:    #{serverValue}"
          end
          if localHasNew?( auth.username )
            puts "Info: local  has new data"
            return :local
          end
        end
        if "200" != response.code
          STDERR.puts "Error: request error result=[#{response.code}]"
          return :retry
        end
      end
    end
  rescue EOFError => e
    STDERR.puts "Error: disconnected by server."
    return :retry
  rescue Errno::ECONNREFUSED => e
    STDERR.puts "Error: can't connect server(ConnectionRefused)."
    return :retry
  rescue SocketError => e
    STDERR.puts "Error: can't connect server(SocketError)."
    return :retry
  rescue Timeout::Error => e
    return :timeout
  end
end


def main
  username  = ENV['PASTEHUB_USER']
  if not username 
    STDERR.puts( "clientSync needs environment var `PASTEHUB_USER'" )
    exit 1
  end

  secretKey = ENV['PASTEHUB_SECRET_KEY']
  if not secretKey
    STDERR.puts( "clientSync needs environment var `PASTEHUB_SECRET_KEY'" )
  end

  setOnlineState( username, false )
  while true
    begin
      auth = PasteHub::AuthForClient.new( username, secretKey )
      result = wait_notify( auth )
      case result
      when :timeout
        STDERR.puts "waiting..."
        setOnlineState( username, true )
      when :retry
        STDERR.puts "retrying...."
        setOnlineState( username, false )
        sleep 60
      else
        setOnlineState( username, true )
        sync_db( auth )
      end
    rescue Errno::EAGAIN => e
      STDERR.puts "retrying... DB locked"
      sleep 2
    end
  end
end

main
